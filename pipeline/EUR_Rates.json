{
	"name": "EUR_Rates",
	"properties": {
		"activities": [
			{
				"name": "create stored procedure to eur table",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "clean json data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "CREATE PROCEDURE sp_transform_usd_to_eur8\n    @api_data NVARCHAR(MAX), \n    @upload_dt DATETIME      \nAS\nBEGIN\n\n    IF ISJSON(@api_data) = 1\n    BEGIN\n        PRINT 'Valid JSON';\n\n        DECLARE @usd_rate FLOAT = JSON_VALUE(@api_data, '$.USD');\n        DECLARE @eur_rate FLOAT = JSON_VALUE(@api_data, '$.EUR');\n\n        PRINT 'USD Rate: ' + CAST(@usd_rate AS NVARCHAR(50));\n        PRINT 'EUR Rate: ' + CAST(@eur_rate AS NVARCHAR(50));\n\n        INSERT INTO source_data_EUR (upload_dt, Currency, rate)\n        SELECT \n            @upload_dt AS upload_dt,\n            [key] AS Currency,                       \n            CAST([value] AS FLOAT) / @eur_rate AS rate \n        FROM OPENJSON(@api_data)                   \n        WHERE [key] <> 'EUR';                       \n    ELSE\n    BEGIN\n        THROW 50000, 'Invalid JSON format in api_data.', 1;\n    END;\nEND;\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Get USD rates data",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT TOP 1 api_data, upload_dt\nFROM source_data_USD\nORDER BY upload_dt DESC;",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "insert data in eur table",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "create stored procedure to eur table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[sp_transform_usd_to_eur8]",
					"storedProcedureParameters": {
						"api_data": {
							"value": "@variables('apijsondata')",
							"type": "String"
						},
						"upload_dt": {
							"value": "@activity('Lookup1').output.firstRow.upload_dt",
							"type": "Datetime"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "clean json data",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get USD rates data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "apijsondata",
					"value": {
						"value": "@replace(replace(string(activity('Get USD rates data').output.firstRow.api_data), '\\\\\\\\\"', '\"'), '\\\\\\\\', '')",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"apijsondata": {
				"type": "String"
			},
			"test": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2025-01-27T21:43:59Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}